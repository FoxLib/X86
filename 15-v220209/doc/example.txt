
        push    32
    
        ; Тест очистки памяти
        mov     r1, $b8000
        mov     r2, $00
        mov     r3, $02000
@@:     mov     [r1], r2
        inc     r1
        inc     r2
        dec     r3                  ; inc r1,255
        jnz     @b
        
        ; Вычисление dx=|x2-x1| dy=|y2-y1|
        ; Рандомная проверка возможностей 
        mov     r1, [sp+1]          ; 3 x2
        mov     r2, [sp+2]          ; 3 x1  
        movbs   r5, 1               ; signx
        movbs   r6, 1               ; signy
        sub     r3, r1, r2          ; 4 dx=abs(x2-x1)
        jnc     @f                  ; 4 
        movbs   r5, -1
        sub     r3, r0, r3          ; 4 r3=-r3
@@:     mov     r1, [sp+3]          ; 3
        mov     r2, [sp+4]          ; 3
        sub     r4, r1, r2          ; 4
        jnc     @f                  ; 4
        movbs   r6, -1
        sub     r4, r0, r4          ; 4 dy=-r4
@f:     sub     r7, r3, r4          ; error=dx-dy  
K:      push    r1
        push    r2        
        call    pset
        add     r8, r7, r7      ; error2
        add     r9, r7, r4
        jns     @f        
        sub     r7, r7, r4        
        add     r1, r5
@@:     sub     r9, r8, r3
        js      @f
        add     r7, r7, r3
        add     r2, r6
@@:     jmp     K

        ; ~64T
pset:   push    r1 r2 r3        ; 6T
        mov     r1, [sp+2]      ; 2T
        mov     r2, [sp+3]      ; 2T
        mov     r3, [sp+4]      ; 2T
        mul     r2, 320         ; 6T
        add     r2, r1, r2      ; 4T
        add     r2, $e0000000   ; 6T
        movb    [r2], r3        ; 4T
        pop     r3 r2 r1        ; 6T
        ret     3

; ------------------------------------------------------------------------------

        movb    r1, [r2]        ; 3B r2 = pc
        addb    r2, 1           ; 3B
        shl     r1, 2           ; 3B 
        add     r2, r1, r3      ; 4B r3-база
        mov     r2, [r2]        ; 3B    получение опкода
        jmp     r2              ; 2B 2T
        

        